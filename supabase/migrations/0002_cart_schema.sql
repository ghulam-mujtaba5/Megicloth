-- supabase/migrations/0002_cart_schema.sql

-- Create the cart_items table
CREATE TABLE public.cart_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES public.products(id) ON DELETE CASCADE,
    quantity INT NOT NULL CHECK (quantity > 0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

    -- Prevent duplicate products in the same cart
    CONSTRAINT unique_user_product UNIQUE (user_id, product_id)
);

-- Add comments to the table and columns
COMMENT ON TABLE public.cart_items IS 'Stores the items in a user''s shopping cart.';
COMMENT ON COLUMN public.cart_items.user_id IS 'The user who owns the cart item.';
COMMENT ON COLUMN public.cart_items.product_id IS 'The product in the cart.';
COMMENT ON COLUMN public.cart_items.quantity IS 'The quantity of the product in the cart.';

-- Create a trigger to update the updated_at column
CREATE OR REPLACE FUNCTION public.handle_cart_item_update()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_cart_item_update
BEFORE UPDATE ON public.cart_items
FOR EACH ROW
EXECUTE FUNCTION public.handle_cart_item_update();


-- Enable Row Level Security (RLS)
ALTER TABLE public.cart_items ENABLE ROW LEVEL SECURITY;

-- Create policies for cart_items
-- 1. Users can view their own cart items
CREATE POLICY "Users can view their own cart items" 
ON public.cart_items
FOR SELECT
USING (auth.uid() = user_id);

-- 2. Users can insert their own cart items
CREATE POLICY "Users can insert their own cart items" 
ON public.cart_items
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- 3. Users can update their own cart items
CREATE POLICY "Users can update their own cart items" 
ON public.cart_items
FOR UPDATE
USING (auth.uid() = user_id);

-- 4. Users can delete their own cart items
CREATE POLICY "Users can delete their own cart items" 
ON public.cart_items
FOR DELETE
USING (auth.uid() = user_id);
